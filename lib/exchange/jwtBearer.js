/**
 * Module dependencies.
 */
var utils = require('../utils')
  , AuthorizationError = require('../errors/authorizationerror');


/**
 * JWT access tokens request.
 *
 * This exchange middleware is used to by clients to request an access token by
 * using a JSON Web Token (JWT) generated by the client and verified by a
 * Public Key stored on the server.
 *
 * Callbacks:
 *
 * This middleware requires an `issue` callback, for which the function
 * signature is as follows:
 *
 *     function(client, data, signature, done) { ... }
 *
 * `client` is the authenticated client instance attempting to obtain an access
 * token. `data` is the JWT encoded header and claim set concatenated with a
 * period '.', `signature` is the signature portion of the JWT. `done` is
 * called to issue an access token:
 *
 *     done(err, accessToken, params)
 *
 * `accessToken` is the access token that will be sent to the client. Any
 * additional `params` will be included in the response. If an error occurs,
 * `done` should be invoked with `err` set in idomatic Node.js fashion.
 *
 * Options:
 *
 *     userProperty    property of `req` which contains the authenticated client (default: 'user')
 *
 * Examples:
 *
 *     server.exchange('urn:ietf:params:oauth:grant-type:jwt-bearer', oauth2orize.exchange.jwtBearer(function(client, data, signature, done) {
 *       var crypto = require('crypto')
 *         , pub = pubKey // TODO - Load your pubKey registered to the client from the file system or database
 *         , verifier = crypto.createVerify("RSA-SHA256");
 *
 *       verifier.update(JSON.stringify(data));
 *
 *       if (verifier.verify(pub, signature, 'base64')) {
 *
 *         // TODO - base64url decode data then verify client_id, scope and expiration are valid
 *
 *         AccessToken.create(client, scope, function(err, accessToken) {
 *           if (err) { return done(err); }
 *           done(null, accessToken);
 *         });
 *       }
 *     }));
 *
 * References:
 *  - [JSON Web Token (JWT) Bearer Token Profiles for OAuth 2.0](http://tools.ietf.org/html/draft-jones-oauth-jwt-bearer-01)
 *  - [JSON Web Token (JWT)](http://tools.ietf.org/html/draft-ietf-oauth-json-web-token-06)
 *  - [Using OAuth 2.0 for Server to Server Applications](https://developers.google.com/accounts/docs/OAuth2ServiceAccount)
 *
 * @param {Object} options
 * @param {Function} issue
 * @api public
 */
module.exports = function jwtBearer(options, issue) {
  if (typeof options == 'function') {
    issue = options;
    options = null;
  }
  options = options || {};

  if (!issue) throw new Error('OAuth 2.0 jwtBearer exchange middleware requires an issue function.');

  var userProperty = options.userProperty || 'user';

  return function jwt_bearer(req, res, next) {
    if (!req.body) { return next(new Error('Request body not parsed. Use bodyParser middleware.')); }

    // The 'user' property of `req` holds the authenticated user.  In the case
    // of the token endpoint, the property will contain the OAuth 2.0 client.
    var client = req[userProperty]
      , contents = []
      , jwtBearer = req.body['assertion']
      , separator = '.';

    if (!jwtBearer) { return next(new AuthorizationError('missing assertion parameter', 'invalid_request')); }

    contents = jwtBearer.split(separator);

    if (!Array.isArray(contents)) { contents = [ contents ]; }

    function issued(err, accessToken, params) {
      if (err) { return next(err); }
      if (!accessToken) { return next(new AuthorizationError('invalid JWT', 'invalid_grant')); }

      var tok = {};
      tok['access_token'] = accessToken;
      if (params) { utils.merge(tok, params); }
      tok['token_type'] = tok['token_type'] || 'bearer';

      var json = JSON.stringify(tok);
      res.setHeader('Content-Type', 'application/json');
      res.setHeader('Cache-Control', 'no-store');
      res.setHeader('Pragma', 'no-cache');
      res.end(json);
    }

    var arity = issue.length;
    if (arity == 5) {
      // contents[0] = header, contents[1] = claimSet, contents[2] = signature
      issue(client, contents[0], contents[1], contents[2], issued);
    } else if (arity == 4) {
      // contents[0] = header, contents[1] = claimSet, contents[2] = signature
      var data = contents[0] + separator + contents[1];
      issue(client, data, contents[2], issued);
    } else { // arity == 3
      issue(client, jwtBearer, issued);
    }
  }
}
